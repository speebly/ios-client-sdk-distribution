// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target x86_64-apple-ios11.4-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Speebly_iOS_Query
import AVFoundation
import Combine
import CommonCrypto
import CryptoKit
import Foundation
import MediaPlayer
import Swift
import SwiftUI
public struct ServiceAccount : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct QueryContext : Swift.Codable {
  public var latitude: Swift.Double
  public var longitude: Swift.Double
  public var language: Swift.String
  public var environment: Swift.String
  public var queryServer: Swift.String
  public var userId: Swift.String
  public var dataDictionary: [Swift.String : Swift.String]
  public init()
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CountDownTimer : Swift.Codable {
  public var timeInSeconds: Swift.String?
  public init()
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Parameter : Swift.Codable {
  public var name: Swift.String
  public var type: Swift.String
  public var value: Swift.String
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct SiriShortcuts : Swift.Codable {
  public var enabled: Swift.Bool
  public init()
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct QueryOptions : Swift.Codable {
  public var isTextToSpeechEnable: Swift.Bool
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct EventButton : Swift.Codable {
  public var id: Foundation.UUID
  public var type: Swift.String
  public var displayText: Swift.String
  public var image: Swift.String
  public var query: Swift.String
  public var backgroundColour: Swift.String
  public var isDisabled: Swift.Bool
  public init(type: Swift.String, displayText: Swift.String, image: Swift.String, query: Swift.String, backgroundColour: Swift.String, isDisabled: Swift.Bool)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct DisplayText : Swift.Codable {
  public var text: Swift.String
  public init()
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct RichMessages : Swift.Codable {
  public var quickReply: [Speebly_iOS_Query.QuickReply]?
  public var eventButtonBar: [Speebly_iOS_Query.EventButton]?
  public var displayText: Speebly_iOS_Query.DisplayText?
  public var siriShortcuts: Speebly_iOS_Query.SiriShortcuts?
  public var countDownTimer: Speebly_iOS_Query.CountDownTimer?
  public var phoneCall: Speebly_iOS_Query.PhoneCall?
  public init()
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol SpeeblyQueryDelegate {
  func didStateChange(state: Swift.String)
  func didReceiveQueryResult(queryResult: Speebly_iOS_Query.SpeeblyQueryResponse)
  func didReceivePartialTranscription(partialTranscription: Swift.String)
}
@available(iOS 13.0, *)
public class SpeeblyQuery : Foundation.ObservableObject {
  public var delegate: Speebly_iOS_Query.SpeeblyQueryDelegate?
  public init(clientId: Swift.String, clientKey: Swift.String, queryContext: Speebly_iOS_Query.QueryContext)
  public func voiceQuery(context: Speebly_iOS_Query.QueryContext)
  public func eventQuery(event: Swift.String, context: Speebly_iOS_Query.QueryContext)
  public func TextQuery(context: Speebly_iOS_Query.QueryContext, query: Swift.String)
  public func stopListening()
  public func stopAudio()
  public func setPlaybackAudioASession()
  @objc deinit
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
}
public struct Payload : Swift.Codable {
  public var queryOptions: Speebly_iOS_Query.QueryOptions?
  public var parameters: [Speebly_iOS_Query.Parameter]?
  public var richMessages: Speebly_iOS_Query.RichMessages?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct QuickReply : Swift.Codable {
  public var id: Foundation.UUID
  public var displayText: Swift.String
  public var image: Swift.String
  public var query: Swift.String
  public var backgroundColour: Swift.String
  public init(displayText: Swift.String, image: Swift.String, query: Swift.String, backgroundColour: Swift.String)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct SpeeblyQueryResponse : Swift.Codable {
  public var type: Swift.String
  public var isTranscriptFinal: Swift.Bool
  public var intent: Swift.String
  public var transcript: Swift.String
  public var displayText: Swift.String
  public var state: Swift.String
  public var audioOutput: Swift.String
  public var endInteraction: Swift.Bool
  public var error: Swift.String
  public var payload: Speebly_iOS_Query.Payload
  public init()
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct audioOutput : Swift.Codable {
  public var type: Swift.String
  public var data: Foundation.Data?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension Data {
  public var sha256: Swift.String {
    get
  }
}
public struct PhoneCall : Swift.Codable {
  public var defaultNumber: Swift.String
  public init()
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
